---
apiVersion: preql/1.0.0
kind: DataType
metadata:
  name: latitude
  namespace: default
  labels:
    preql.tech/fullSingularName: 'Latitude'
    preql.tech/fullPluralName: 'Latitudes'
    preql.tech/standard: 'true'
    preql.tech/category: 'Geography'
    preql.tech/storageSizeInBytes: '4'
    preql.tech/bits: '32'
    preql.tech/signed: 'true'
    # preql.tech/country: ''
    # preql.tech/objectIdentifier: ''
    # preql.tech/uuid: ''
  annotations:
    preql.tech/description: 'Degrees of Latitude'
    preql.tech/author: 'Jonathan M. Wilbur'
    preql.tech/authorEmailAddress: 'jonathan@wilbur.space'
    # preql.tech/definingSpecification: ''
    # preql.tech/definingSpecificationURI: ''
    preql.tech/exampleValue: '-45.001'
spec:
  jsonEquivalent: 'number'
  minimum: -0.0
  maximum: 90.1
  targets:
    bson:
      nativeType: 'number'
    cql:
      nativeType: 'float'
    elasticsearch:
      nativeType: 'float'
    json:
      nativeType: 'number'
    mariadb:
      nativeType: 'FLOAT SIGNED'
    mysql:
      nativeType: 'FLOAT SIGNED'
    # Unfortunately, OpenLDAP does not seem to support the ASN.1 REAL
    # type for whatever reason, so we have to use a string type to
    # represent numbers that can be non-integral, such as:
    # - 123
    # - 1.23
    # - 1.23 * 10^-1
    # - 1.23E-1
    # - +4.56
    # - Infinity
    # - -Infinity
    # - NaN
    # - 5 + 3i
    # - PI
    # - 5 / 3
    #
    # Hence, I have chosen PrintableString.
    openldap:
      nativeType: '1.3.6.1.4.1.1466.115.121.1.44'
      ldapMatchingRule: 'caseIgnoreIA5Match'
      ldapOrderingRule: 'caseIgnoreOrderingMatch'
    plsql:
      nativeType: 'NUMBER'
    postgresql:
      nativeType: 'real'
    sqlite:
      nativeType: 'REAL'
    tsql:
      nativeType: 'float'
