---
apiVersion: preql/1.0.0
kind: DataType
metadata:
  name: ipv6
  namespace: default
  labels:
    preql.tech/fullSingularName: ''
    preql.tech/fullPluralName: ''
    preql.tech/standard: 'true'
    preql.tech/category: ''
    # preql.tech/storageSizeInBytes: ''
    # preql.tech/bits: ''
    # preql.tech/signed: ''
    # preql.tech/country: ''
    # preql.tech/objectIdentifier: ''
    # preql.tech/uuid: ''
  annotations:
    preql.tech/description: ''
    preql.tech/author: 'Jonathan M. Wilbur'
    preql.tech/authorEmailAddress: 'jonathan@wilbur.space'
    # preql.tech/definingSpecification: ''
    # preql.tech/definingSpecificationURI: ''
    preql.tech/exampleValue: ''
spec:
  jsonEquivalent: 'string'
  minLength: 2 # For the IPv6 address '::'
  maxLength: 39 # For the longest IPv6 address.
  regexes:
    pcre:
      ipv6:
        # Source: https://stackoverflow.com/questions/53497/regular-expression-that-matches-valid-ipv6-addresses
        - pattern: '^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))'
          positive: True
  setters:
    - type: 'case'
      casing: 'upper'
  targets:
    bson:
      nativeType: 'string'
    cql:
      nativeType: 'text'
    elasticsearch:
      nativeType: 'ip'
    json:
      nativeType: 'string'
    mariadb:
      nativeType: 'VARCHAR(39)'
    mysql:
      nativeType: 'VARCHAR(39)'
    openldap:
      nativeType: '1.3.6.1.4.1.1466.115.121.1.15'
      ldapMatchingRule: 'caseIgnoreMatch'
      ldapOrderingRule: 'caseIgnoreOrderingMatch'
      ldapSubstringMatchingRule: 'caseIgnoreSubstringsMatch'
    plsql:
      nativeType: 'VARCHAR2(39 CHAR)'
    postgresql:
      nativeType: 'inet'
    sqlite:
      nativeType: 'TEXT'
    tsql:
      nativeType: 'VARCHAR(39)'
